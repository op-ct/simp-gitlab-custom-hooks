#!/usr/bin/env ruby

require 'yaml'

def fail_hook(message)
  puts message
  exit(1)
end

def pass_hook
  exit(0)
end

hooks_dir = File.expand_path(File.dirname(__FILE__))
config_file = File.join(hooks_dir, 'hooks.yaml')

# Load options
begin
  options = YAML.load_file(config_file)
rescue Errno::ENOENT
  fail_hook("Error loading custom hooks configuration file at #{config_file}")
end

# The pre-receive hook receives 3 command-line arguments, separated by spaces
# on STDIN
#
# oldrev
#   The original HEAD from the destination branch
#
# newrev
#   Newly calculated HEAD for the completed merge
#
# refname
#   The destination branch of the merge/push
oldrev, newrev, refname = STDIN.read.split(' ')
refname.slice!('refs/heads/')

# Check if the branch in question is even in our list of configured branches
if ! options['pre-receive']['branch_based_merge']['branches'].key?(refname) then
  pass_hook
else
  # Since we have a valid destination branch, let's get the valid source branch
  # list
  valid_branches = options['pre-receive']['branch_based_merge']['branches'][refname]

  merge_parent_revs = %x[git log -1 --pretty='%P' #{newrev}].split(' ')

  valid_source_revs = Array.new
  valid_branches.each { |branch|
    valid_source_revs << %x[git show-ref refs/heads/#{branch}].split(' ').first
  }

  # Now we have a list of valid source branch HEAD refs and valid merge parents
  # We union the arrays and check if it's empty
  if ! (valid_source_revs & merge_parent_revs).empty? then
    pass_hook
  end

  # If we are still operating at this point we want to check if this merge/push
  # is for a revert. In that case, we need to check if the parent rev is
  # in the historical revs of the target branch
  rev_history = %x[git log --pretty='%H' refs/heads/#{refname}].split("\n")
  if rev_history.include?(merge_parent_revs.last) then
    pass_hook
  end
end

# If we get to the end without the hook passing, we fail the hook
fail_hook("Merges to the branch #{refname} must originate from the following branch(es): " + valid_source_revs.join(', ') + ". Merges from other branches are not allowed.")
